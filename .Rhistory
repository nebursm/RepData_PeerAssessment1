a
NA
is.na(a)
for (i in 2:4) set(DT, sample(1:5, size=3), i, NA)
DT
DT <- data.table(A=c(2, 2, 3, 5, 2, 5, 5, 4, 4, 1), B=c(2, 1, 4, 2, 4, 3, 4, 5, 2 ,4), C=c(5, 2, 4, 1, 2, 2, 1, 2, 5, 2), D=c(3, 3, 3, 1, 5, 4, 4, 1, 4, 3))
set.seed(1)
for (i in 2:4) set(DT, sample(1:5, size=3), i, NA)
DT
names(DT)
setnames(DT, names(DT), c("a","b","c";"d"))
setnames(DT, names(DT), c("a","b","c","d"))
DT
sample(10,3)
DT <- data.table(A=c(2, 2, 3, 5, 2, 5, 5, 4, 4, 1), B=c(2, 1, 4, 2, 4, 3, 4, 5, 2 ,4), C=c(5, 2, 4, 1, 2, 2, 1, 2, 5, 2), D=c(3, 3, 3, 1, 5, 4, 4, 1, 4, 3))
set.seed(1)
# Loop through columns 2,3 and 4, and for each one select 3 rows at random and set the value of that column to NA
for (i in 2:4) set(DT, sample(1:5, size=3), i, NA)
# Change the column names to lower case. When setnames() is passed just one input vector, that needs to be all the new names
setnames(DT, tolower(names(DT))
)
DT
DT <- data.table(a=letters[c(1,1,1,2,2)], b=1)
DT
paste0(names(DT),"_2")
setnames(DT, tolower(paste0(names(DT),"_2")))
DT
setnames(DT, "a_2", "A2")
DT
setcolorder(DT, c("b_2", "A2"))
DT
# Load relevant packages
library("PerformanceAnalytics")
library("zoo")
load(http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData)
load("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData")
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
head(returns_df)
tail(returns_df)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab7.RData"))
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sigma2_annual^0.5
0.264^2
0.37^2
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
mu_boeing = mu_hat_annual["rboeing"]
mu_msft = mu_hat_annual["rmsft"]
sigma2_boeing =  sigma2_annual["rboeing"]
sigma2_msft = sigma2_annual["rmsft"]
sigma_boeing = sigma_annual["rboeing"]
sigma_msft = sigma_annual["rmsft"]
sigma_boeing_msft = cov_hat_annual
rho_boeing_msft = sigma_boeing_msft/(sigma_boeing*sigma_msft)
cof(returns_df)
cor(returns_df)
cor(returns_df)[1,2]
library("data.table")
iris = data.table(iris)
View(iris)
iris[Species == "virginica"]
iris[Species %in% ("virginica", "versicolor")]
iris[Species %in% c("virginica", "versicolor")]
str(iris)
iris = as.data.table(iris)
str(iris)
names(iris)
gsub("Sepal.", "", names(iris))
setnames(iris, names(iris), gsub("Sepal.", "", names(iris)))
names(iris)
iris[, 2:3]
iris[, 2]
iris[, (2)]
iris[, .(2)]
cols <- c("Petal.Length", "Petal.Width")
iris[, (cols)]
iris[, (cols) := NULL]
names(iris)
grep("^Petal",names(iris))
grep("^Length",names(iris))
library("PerformanceAnalytics")
library("zoo")
# Load the data
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Estimate the parameters: multivariate
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sigma2_annual^0.5
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
# The annual estimates of the CER model parameters for Boeing and Microsoft
mu_boeing = mu_hat_annual["rboeing"]
mu_msft = mu_hat_annual["rmsft"]
sigma2_boeing =  sigma2_annual["rboeing"]
sigma2_msft = sigma2_annual["rmsft"]
sigma_boeing = sigma_annual["rboeing"]
sigma_msft = sigma_annual["rmsft"]
sigma_boeing_msft = cov_hat_annual
rho_boeing_msft = rho_hat_annual
# The ratio Boeing stock vs Microsoft stock (adds up to 1)
boeing_weights = seq(from=-1, to=2, by=0.1)
msft_weights = 1 - boeing_weights
# Portfolio parameters
mu_portfolio =  boeing_weights*mu_boeing + msft_weights*mu_msft
sigma2_portfolio =  boeing_weights^2 * sigma2_boeing + msft_weights^2 * sigma2_msft + 2 * boeing_weights * msft_weights * sigma_boeing_msft
sigma_portfolio = sqrt(sigma2_portfolio)
# Plotting the different portfolios
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="Microsoft", pos=4)
t_bill_rate = 0.03
# Ratio Boeing stocks
boeing_weights = seq(from=-1, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_boeing_bill = t_bill_rate + boeing_weights*(mu_boeing - t_bill_rate)
sigma_portfolio_boeing_bill = boeing_weights * sigma_boeing
# Plot previous exercise
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Portfolio Combination Boeing and T-bills
points(sigma_portfolio_boeing_bill, col="blue", type="b")
points(sigma_portfolio_boeing_bill, mu_portfolio_boeing_bill, col="blue", type="b")
test <- get("https://apis.bbvabancomer.com/datathon/info/merchants_categories")
install.packages("RCurl")
library("data.table")
DT <- data.table(A=letters[c(1,1,2,2,2,3,3)], B=c(4,8,1,5,8,6,9), C=c(7,10,8,6,11,12,9))
setkey(DT, A, B)
key(DT)
DT[.("b",6)]
DT
DT[.("b",6), roll="TRUE"]
DT[.("b",6), roll=TRUE]
DT[.("b",5)]
DT[.("b",6), roll="nearest"]
DT[.("b",6), roll=+Inf]
DT[.("b",6), roll=-Inf]
DT[.("b",6), roll=2]
DT[.("b",6), roll=-2]
DT[.("b",6), roll=-3]
DT[.("b",6), roll=3]
DT
DT[.("b",6), roll=1]
DT[.("b",6), roll=0]
DT[.("b",6), roll=2]
DT[.("b",6), roll=3]
DT[.("b",6), roll=4]
DT[.("b",6), roll=5]
DT[.("b",-2:10)]
DT
DT[.("b",-2:10),roll=+Inf]
DT[.("b",-2:10),roll=-Inf]
DT
DT[.("b",-2:10),roll=2]
DT[.("b",-2:10),roll=2,rollends=TRUE]
DT
DT[.("b",-2:10),roll=TRUE]
# Carry the first observation backwards
DT[.("b",-2:10),roll=TRUE,rollends=TRUE]
DT
DT[.("b",-2:10),roll=2,rollends=TRUE]
DT[.("b",-2:10),roll=2,rollends=c(TRUE,TRUE)]
DT
DT[.("b",20)]
library(RCurl)
opciones = c("-H "Accept: application/json"")
opciones = list(-H "Accept: application/json")
header = c(Accept = "application/json", Content-Type = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
library(RCurl)
header = c(Accept = "application/json", Content-Type = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
header = list(Accept = "application/json", Content-Type = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
header = c(Accept = "application/json", Content-Type = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
header = c(Accept="application/json", Content-Type="application/json", Accept-Language="ES", Authorization="Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6",
)
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6", httpheader = c(Accept = "application/json", Content-Type = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA=="))
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA=="))
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA=="), verbose=TRUE)
httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6", verbose=TRUE)
httpheader = list(Accept = "application/json", 'Content-Type' = "application/json", Accept-Language = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
httpheader = list(Accept = "application/json")
httpheader = list(Accept = "application/json", 'Content-Type' = "application/json")
httpheader = list(Accept = "application/json", 'Content-Type' = "application/json", Accept-Language = "ES")
httpheader = list(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES")
httpheader = list(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA==")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = "BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA=="), verbose=TRUE)
upwd = base64("BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6")
upwd = base64("BBVA-Data-API:542db2903808e4d7ccf4421c4f7c0ed07d5974a6")
upwd
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", userpwd = upwd, httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = "Basic YXBwLmJidmEudGVzdDoxMjM0NTY3OA=="), verbose=TRUE)
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
upwd
upwd[1]
aut <- c("Basic ", upwd[1], "==")
aut
aut <- paste0("Basic ", upwd[1], "==")
aut
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = aut), verbose=TRUE)
upwd = base64("app.bbva.micro.marketing:542db2903808e4d7ccf4421c4f7c0ed07d5974a6")
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
datos
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "application/json", 'Content-Type' = "text/xml", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
datos
datos = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "text/xml", 'Content-Type' = "text/xml", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
datos
merchants = getURL("https://apis.bbvabancomer.com/datathon/info/merchants_categories", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
basic.stats = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/15390/customer_zipcodes?date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
str(basic.stats)
head(basic.stats)
basic.stats.03100 = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/15390/customer_zipcodes?zipcode=03100,date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
basic.stats.03100 = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/15390/customer_zipcodes/03100/?date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
basic.stats.03100 = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/03100/customer_zipcodes?date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
basic.stats.03100 = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/15390/basic_stats?date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
basic.stats.03100
install.packages("jsonlite")
library("jsonlite")
merchantsDT <- fromJSON(merchants)
head(merchantsDT)
str(merchantsDT)
zipcodes = getURL("https://apis.bbvabancomer.com/datathon/zipcodes/15390/customer_zipcodes?date_min=20140101&date_max=20140331&group_by=month&by=incomes", httpheader = c(Accept = "application/json", 'Content-Type' = "application/json", 'Accept-Language' = "ES", Authorization = upwd), verbose=TRUE)
zipcodesDT <- fromJSON(zipcodes)
str(zipcodesDT)
head(zipcodesDT)
library(jsonlite)
options(digits=4)
library(zoo)
library(car)
install.packages("car")
library(car)
loadPath = "/Users/rubenadad/Documents/CURSOS/Introduction to Computational Finance and Financial Econometrics/Excel"
singleIndexPrices.df = read.csv(file=paste(loadPath, "singleIndexPrices.csv", sep=""),
stringsAsFactors=F)
loadPath = "/Users/rubenadad/Documents/CURSOS/Introduction to Computational Finance and Financial Econometrics/Excel/"
singleIndexPrices.df = read.csv(file=paste(loadPath, "singleIndexPrices.csv", sep=","), stringsAsFactors=F) colnames(singleIndexPrices.df)
singleIndexPrices.df = read.csv(file=paste(loadPath, "singleIndexPrices.csv", sep=","), stringsAsFactors=F)
singleIndexPrices.df = read.csv(file=paste(loadPath, "singleIndexPrices.csv", sep=""), stringsAsFactors=F)
colnames(singleIndexPrices.df)
td = seq(as.Date("1998-01-01"), as.Date("2003-01-01"), by="months")
singleIndexPrices.z = zoo(singleIndexPrices.df[,-1], td)
my.panel <- function(...) {
lines(...)
abline(h=0)
}
plot(singleIndexPrices.z, lwd=2, col="blue")
#
# 3. create returns
#
si.z = diff(log(singleIndexPrices.z))
si.df = as.data.frame(si.z)
View(si.df)
head(si.df)
# returns excluding market
ret.mat = as.matrix(si.df[,-1])
# plot returns over full sample
plot(si.z, panel=my.panel, lwd=2, col="blue")
#
# compute alphas and betas using descriptive statistics
#
ret.mat = as.matrix(si.df)
muhat.vals = colMeans(si.df)
View(ret.mat)
cov.mat = var(ret.mat)
beta.vals = cov.mat[,1]/cov.mat[1,1]
alpha.vals = muhat.vals[-1] - beta.vals[-1]*muhat.vals["sp500"]
beta.vals
alpha.vals
#
# plot asset returns and market returns
#
# distribution of market return
par(mfrow=c(2,2))
hist(si.df$sp500,main="S&P 500 monthly cc returns",
probability=T, ylab="cc return",col="slateblue1")
boxplot(si.df$sp500,outchar=T, ylab="cc return",col="slateblue1")
plot(density(si.df$sp500),type="l",xlab="cc return",
ylab="density estimate", main="smoothed density",col="slateblue1")
qqnorm(si.df$sp500,col="slateblue1")
qqline(si.df$sp500)
par(mfrow=c(1,1))
# sp500 vs sbux
plot(si.z[,c("sp500","sbux")], plot.type="single",
main="Monthly cc returns on S&P 500 and Starbucks",
ylab="returns", col=c("blue","orange"), lwd=c(2,2))
abline(h=0)
legend(x="bottomright",legend=c("S&P 500","SBUX"),
lwd=c(2,2),col=c("blue","orange"))
plot(si.df$sp500,si.df$sbux, col="slateblue1",lwd=2, pch=16, cex=2,
main="Monthly cc returns on S&P 500 and Starbucks",
xlab="cc return on S&P 500", ylab="cc return on SBUX")
abline(h=0,v=0)
abline(a=alpha.vals["sbux"],b=beta.vals["sbux"],
col="orange", lwd=3)
# sp500 vs msft
plot(si.z[,c("sp500","msft")], plot.type="single",
main="Monthly cc returns on S&P 500 and Microsoft",
ylab="returns", col=c("blue","orange"), lwd=c(2,2))
abline(h=0)
legend(x="bottomright",legend=c("S&P 500","MSFT"),
lwd=c(2,2),col=c("blue","orange"))
plot(si.df$sp500,si.df$msft, col="slateblue1",lwd=2, pch=16, cex=2,
main="Monthly cc returns on S&P 500 and Microsoft",
xlab="cc return on S&P 500", ylab="cc return on msft")
abline(h=0,v=0)
abline(a=alpha.vals["msft"],b=beta.vals["msft"],
col="orange", lwd=3)
# sp500 vs nord
plot(si.z[,c("sp500","nord")], plot.type="single",
main="Monthly cc returns on S&P 500 and Nordstrom",
ylab="returns", col=c("blue","orange"), lwd=c(2,2))
abline(h=0)
legend(x="bottomright",legend=c("S&P 500","NORD"),
lwd=c(2,2),col=c("blue","orange"))
plot(si.df$sp500,si.df$nord, col="slateblue1",lwd=2, pch=16, cex=2,
main="Monthly cc returns on S&P 500 and Nordstrom",
xlab="cc return on S&P 500", ylab="cc return on nord")
abline(h=0,v=0)
abline(a=alpha.vals["nord"],b=beta.vals["nord"],
col="orange", lwd=3)
# sp500 vs. boeing
plot(si.z[,c("sp500","boeing")], plot.type="single",
main="Monthly cc returns on S&P 500 and Boeing",
ylab="returns", col=c("blue","orange"), lwd=c(2,2))
abline(h=0)
legend(x="bottomright",legend=c("S&P 500","BOEING"),
lwd=c(2,2),col=c("blue","orange"))
plot(si.df$sp500,si.df$boeing, col="slateblue1",lwd=2,pch=16,cex=2,
main="Monthly cc returns on S&P 500 and Boeing",
xlab="cc return on S&P 500", ylab="cc return on boeing")
abline(h=0,v=0)
abline(a=alpha.vals["boeing"],b=beta.vals["boeing"],
col="orange", lwd=3)
#
# 6. create scatterplot with arbitrary regression line
#
plot(si.df$sp500,si.df$msft,col="slateblue1",pch=16, cex=2,
ylab="msft",xlab="sp500")
# plot line with intercept=0, slope=1
abline(a=0,b=1, lwd=3)
abline(h=0,v=0)
# illustrate least squares as best fitting line
plot(si.df$sp500,si.df$msft,col="slateblue1",lwd=2, pch=16, cex=2,
main="",
ylab="msft",xlab="sp500")
# plot line with intercept=0, slope=1
abline(a=0,b=1, col="black", lwd=3)
abline(h=0,v=0)
# plot best fitting regression line
abline(a=alpha.vals["msft"], b=beta.vals["msft"],
col="orange", lwd=3)
# 7. estimate single Index model for Microsoft using lm function
#
colnames(si.df)
?lm
args(lm)
msft.fit = lm(msft~sp500,data=si.df)
class(msft.fit)
names(msft.fit)
msft.fit$coef
# print method
msft.fit
# summary method - gives SE values, t-stats etc
summary(msft.fit)
# extractor functions
coef(msft.fit)
residuals(msft.fit)[1:5]
fitted(msft.fit)[1:5]
# store information from summary
msft.summary = summary(msft.fit)
names(msft.summary)
msft.summary$coef
msft.summary$r.squared
# plot scatterplot with regression line
plot(si.df$sp500,si.df$msft,col="slateblue1", pch=16, cex=2,
main="Estimated SI model for Microsoft",
ylab="msft",xlab="sp500")
# plot line with intercept=least squares intercept,
# slope=least squares slope
abline(h=0,v=0)
abline(msft.fit, col="orange", lwd=3)
,43*12
.43*12
ln(12+0.43)
log(12+0.43)
log(1+0.43)
5.59*(12^2)
5.59*(12^0.5)
(5.16-0.08)/19.36433
0.08*12
(5.16-0.96)/19.36433
0.49*12
2.9*(12^0.5)
(5.88-0.96)/10.04589
1.28*12
8.45*(12^0.5)
(15.36-0.96)/29.27166
library("zoo")
library("quadprog")
# Load the working environment
load("~/Documents/CURSOS/Introduction to Computational Finance and Financial Econometrics/R Assignments/lab9.RData")
# Explore the data set
head(returns_df)
tail(returns_df)
# Timeplots with stocks on individual graphs
my.panel <- function(...) {
lines(...)
abline(h=0)
}
plot(returns_df, lwd=2, panel=my.panel, col="blue")
# Timeplots with stocks on same graph
plot(returns_df, plot.type = "single", main="Returns", col=1:4, lwd=2)
abline(h=0)
legend(x="bottomleft", legend=colnames(returns_df), col=1:4, lwd=2)
# Parameters CER model
mu_hat_month = apply(returns_df, 2, mean)
mu_hat_month
sigma2_month = apply(returns_df, 2, var)
sigma2_month
sigma_month = sigma2_month^0.5
mu_hat_month = c(0.0043, 0.0049, 0.0128)
names(mu_hat_month) <- c("VPACX", "VBLTX", "VEIEX")
mu_hat_month
names(sigma_month) <- c("VPACX", "VBLTX", "VEIEX")
sigma_month
sigma_month <- c(0.0559, 0.0290, 0.0845)
names(sigma_month) <- c("VPACX", "VBLTX", "VEIEX")
sigma_month
mu_hat_month = apply(returns_df, 2, mean)
mu_hat_month
sigma2_month = apply(returns_df, 2, var)
sigma2_month
sigma_month = sigma2_month^0.5
sigma_month
cov_mat_month = var(returns_df)
cov_mat_month
cor_mat_month = cor(returns_df)
cor_mat_month
# Pairwise scatterplots
pairs(coredata(returns_df), col="blue", pch=16)
# Calculate the global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_month, cov_mat_month, shorts=TRUE)
global_min_var_portfolio
# Plot the portfolio weights of our four stocks
plot(global_min_var_portfolio)
# set restriction matrices
D_matrix = 2* cov_mat_month
D_matrix
d_vector = rep(0,4)
d_vector
A_matrix = cbind(rep(1,4),diag(4))
A_matrix
b_vector = c(1,rep(0,4))
b_vector
# use solve.QP to minimize portfolio variance
quad_prog = solve.QP(D_matrix, d_vector, A_matrix, b_vector, meq=1)
quad_prog
# The global minimum variance portfolio
global_min_var_portfolio  = globalMin.portfolio(mu_hat_month, cov_mat_month, shorts=FALSE)
global_min_var_portfolio
setwd("~/Documents/CURSOS/Reproducible Research/RepData_PeerAssessment1")
setwd("~/Documents/CURSOS/Reproducible Research/RepData_PeerAssessment1")
activity <- read.csv("activity.csv", stringsAsFactors=F)
summary(activity)
head(activity)
library(dplyr)
grp <- group_by(activity, date)
tot_steps <- summarise(grp, Total_steps = sum(steps))
tot_steps$date <- as.Date(tot_steps$date, "%Y-%m-%d")
hist(tot_steps$Total_steps, main="total number of steps taken each day - includes missing values", xlab="daily steps", col="red")
avg_steps <- summarise(grp, Mean = mean(steps), Median = median(steps))
library(xtable)
xtable(avg_steps)
View(avg_steps)
class(avg_steps)
str(avg_steps)
xtable(as.data.frame(avg_steps))
print(xtable(as.data.frame(avg_steps), caption="\\tt mean and median total number of steps taken per day\\"))
print(xtable(as.data.frame(avg_steps), caption="\\tt mean and median total number of steps taken per day\\"))
print(xtable(as.data.frame(avg_steps), caption="\\tt mean and median total number of steps taken per day\\"), booktabs=TRUE)
print(xtable(as.data.frame(avg_steps), caption="\\tt mean and median total number of steps taken per day\\"), booktabs=TRUE, type="html")
grp <- group_by(activity, interval)
avg_interval <- summarise(grp, Mean = mean(steps, na.rm=T), Median = median(steps, na.rm=T))
plot(avg_interval$interval, avg_interval$Mean, type="l", lwd=2, col="blue", main="average number of steps taken", xlab="date", ylab="average steps per interval", cex.axis=0.8)
abline(h=c(25,50,75,100,125,150,175,200), lty=3)
max_interval <- subset(avg_interval, avg_interval$Mean == max(na.omit(avg_interval$Mean)), select=c(interval, Mean))
max_interval[1]
max_interval[2]
avg_steps$Mean[which(complete.cases(avg_steps) %in% "FALSE")] <- mean(na.omit(activity$steps))
avg_steps$Mean[which(complete.cases(avg_steps) %in% "FALSE")] <- mean(na.omit(activity$steps))
new_activity <- left_join(activity, avg_steps)
new_activity$steps[which(complete.cases(new_activity$steps) %in% "FALSE")] <- new_activity$Mean[which(complete.cases(new_activity$steps) %in% "FALSE")]
View(new_activity)
new_activity <- subset(new_activity, select=c("date", "steps", "interval"))
View(new_activity)
library(timeDate)
library(ggplot2)
new_activity$weekend <- factor(isWeekend(as.Date(new_activity$date)))
new_activity$weekend <- gsub("TRUE", "weekend", new_activity$weekend)
new_activity$weekend <- gsub("FALSE", "weekday", new_activity$weekend)
grp <- group_by(new_activity, weekend, interval)
avg_interval <- summarise(grp, Mean = mean(steps), Median = median(steps))
g <- ggplot(avg_interval, aes(interval, Mean))
g + geom_line(color="steelblue") + facet_grid(weekend ~ .) + labs(y = "average steps per interval") + geom_smooth(method="lm", color="red")
